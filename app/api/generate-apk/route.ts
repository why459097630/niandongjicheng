/* app/api/generate-apk/route.ts */
import { NextRequest, NextResponse } from 'next/server'
import { Octokit } from 'octokit'

/** Git tree 节点类型（放宽到 Octokit 接受的联合） */
type GitFileMode = '100644' | '100755' | '040000' | '160000' | '120000'
type GitObjectType = 'blob' | 'tree'

type TreeItem = {
  path: string
  mode?: GitFileMode
  type: GitObjectType
  content?: string
  sha?: string
}

/** 读取环境变量，兼容 GH_* / GITHUB_* 两种命名 */
function getEnvOrThrow() {
  const token =
    process.env.GITHUB_TOKEN ||
    process.env.GH_TOKEN ||
    process.env.GH_PAT ||
    ''

  const owner =
    (process.env.GITHUB_OWNER || process.env.GH_OWNER || '').trim()
  const repo =
    (process.env.GITHUB_REPO || process.env.GH_REPO || '').trim()
  const branch =
    (process.env.GITHUB_BRANCH || process.env.GH_BRANCH || 'main').trim()

  if (!token || !owner || !repo) {
    throw new Error(
      'Missing env: GITHUB_TOKEN (或 GH_TOKEN), GITHUB_OWNER (或 GH_OWNER), GITHUB_REPO (或 GH_REPO)'
    )
  }
  return { token, owner, repo, branch }
}

/** 生成一组“兜底文件”，当前端没显式传 files 时使用 */
function makeDefaultFiles(prompt: string, template?: string): TreeItem[] {
  const appName = 'NDJCApp'
  const desc = prompt || 'Generated by NDJC'
  const tmp = template || 'core-template'
  const stamp = Date.now()

  const idsXml = `<resources>
    <!-- you can add id resources here -->
</resources>`

  const layoutXml = `<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <!-- NDJC:BEGIN(header) -->
    <TextView
        android:id="@+id/ndjcTitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="${appName}"
        android:textSize="22sp"
        android:textStyle="bold"
        android:paddingBottom="12dp" />
    <!-- NDJC:END(header) -->

    <!-- NDJC:BEGIN(body) -->
    <TextView
        android:id="@+id/ndjcBody"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="${desc}"
        android:textSize="16sp"
        android:paddingBottom="16dp" />
    <!-- NDJC:END(body) -->

    <!-- NDJC:BEGIN(actions) -->
    <Button
        android:id="@+id/ndjcPrimary"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Get Started"/>
    <!-- NDJC:END(actions) -->

</LinearLayout>`

  const note = `template=${tmp}\nprompt=${desc}\ntime=${new Date(stamp).toISOString()}`

  return [
    {
      path: 'app/src/main/res/values/ids.xml',
      mode: '100644',
      type: 'blob',
      content: idsXml,
    },
    {
      path: 'app/src/main/res/layout/activity_main.xml',
      mode: '100644',
      type: 'blob',
      content: layoutXml,
    },
    {
      path: `app/src/main/assets/ndjc_${stamp}.txt`,
      mode: '100644',
      type: 'blob',
      content: note,
    },
  ]
}

/** 把文件写入（基于 base branch 创建 tree -> commit -> 更新 ref） */
async function commitFiles(
  octokit: Octokit,
  p: { owner: string; repo: string; branch: string },
  files: TreeItem[],
  message: string
) {
  // 1) 取 branch 的最新 sha
  const ref = await octokit.rest.git.getRef({
    owner: p.owner,
    repo: p.repo,
    ref: `heads/${p.branch}`,
  })
  const baseSha = ref.data.object.sha

  // 2) 创建 tree
  const tree = files.map((f) => ({
    path: f.path,
    mode: f.mode ?? '100644',
    type: f.type,
    content: f.content,
    sha: f.sha,
  }))

  const createdTree = await octokit.rest.git.createTree({
    owner: p.owner,
    repo: p.repo,
    base_tree: baseSha,
    tree: tree as any, // Octokit 类型较严，这里显式放宽
  })

  // 3) 创建 commit
  const commit = await octokit.rest.git.createCommit({
    owner: p.owner,
    repo: p.repo,
    message,
    tree: createdTree.data.sha,
    parents: [baseSha],
  })

  // 4) 更新 ref
  await octokit.rest.git.updateRef({
    owner: p.owner,
    repo: p.repo,
    ref: `heads/${p.branch}`,
    sha: commit.data.sha,
  })

  return commit.data.sha
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json().catch(() => ({}))

    // 统一解析 body
    const prompt: string = body?.prompt ?? ''
    const template: string | undefined = body?.template
    const inputFiles: TreeItem[] | undefined = body?.files

    // 若前端没传 files，使用兜底文件（注意此处允许 2 个参数）
    const files: TreeItem[] =
      Array.isArray(inputFiles) && inputFiles.length > 0
        ? inputFiles
        : makeDefaultFiles(prompt, template)

    const { token, owner, repo, branch } = getEnvOrThrow()
    const octokit = new Octokit({ auth: token })

    const commitSha = await commitFiles(
      octokit,
      { owner, repo, branch },
      files,
      `NDJC: apply ${files.length} files`
    )

    return NextResponse.json({
      ok: true,
      commit: commitSha,
      files: files.map((f) => f.path),
    })
  } catch (err: any) {
    return NextResponse.json(
      {
        ok: false,
        error: err?.message || String(err),
      },
      { status: 500 }
    )
  }
}
